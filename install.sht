#%shebang
#%version 1
#
# Installation script
#

#%prolog

#%include sys/msg
#%include sys/cmd
#%include sys/checkdir
#%include sys/checkvar
#%include sys/copyfile

################

# Set variables
SRCDIR="$(cd -- "$(dirname -- "$0")" ; pwd)"
DSTDIR="${HOME}"

: ${XDG_DATA_HOME:="${HOME}/.local/share"}

BCKDIR="${XDG_DATA_HOME}/spxshell/backup"
BACKUP="no"	# No backup by default

COPYFILES="
dot.bashrc
dot.exrc
dot.inputrc
dot.profile
dot.vimrc
"

LINKFILES="
dot.bashrc:dot.kshrc
"

REMOVEFILES="
dot.bash_profile
dot.bash_login
"

####

# Initialization subroutine
startup ()
{
    local _umask=""

    # Check variables
    {
	check_var SRCDIR &&
	check_var DSTDIR
    } || return 1

    # Check destination directory
    check_dir "${DSTDIR}" || return 1

    # Backup destination files only for the first time
    # and if the backup directory is successfully created
    if test -d "${BCKDIR}" ; then
	BACKUP="no"
    else
	# Try to create directory
	_umask="$(umask)"	# Save umask value
	umask 0077		# Create only user accessible directories
	cmd mkdir -p "${BCKDIR}"
	test $? -ne 0 && BACKUP="no" || BACKUP="yes"
	umask "${_umask}"	# Restore umask
    fi
}

# Copy files
copy_files ()
{
    local _f=""
    local _src=""
    local _dst=""

    for _f in ${COPYFILES} ; do
	_src="${SRCDIR}/${_f}"
	_dst="${DSTDIR}/${_f#dot}"
	# Try to backup destination file
	# Ignore unsuccessful copying
	test "${BACKUP}" = "yes" && test -f "${_dst}" && cmd cp "${_dst}" "${BCKDIR}"
	copy_file "${_src}" "${_dst}"
    done
}

# Link files
link_files ()
{
    local _f=""
    local _src=""
    local _dst=""

    for _f in ${LINKFILES} ; do
	_src="${_f%:*}"
	test -n "${_src}" && test "${_src}" != "${_f}" && _src="${_src#dot}" || continue
	_dst="${_f#*:}"
	test -n "${_dst}" && test "${_dst}" != "${_f}" && _dst="${DSTDIR}/${_dst#dot}" || continue
	# Skip if the link exists
	test -L "${_dst}" && continue
	# Try to backup file
	test "${BACKUP}" = "yes" && test -f "${_dst}" && cmd cp "${_dst}" "${BCKDIR}"
	cmd ln -sf "${_src}" "${_dst}"
	if test $? -ne 0 ; then
	    err "can't create symbolic link '${_src}' -> '${_dst}'"
	fi
    done
}

# Remove files
remove_files ()
{
    local _f=""
    local _dst=""

    for _f in ${REMOVEFILES} ; do
	_dst="${DSTDIR}/${_f#dot}"
	if test -f "${_dst}" ; then
	    # Try to backup file
	    test "${BACKUP}" = "yes" && cmd cp "${_dst}" "${BCKDIR}"
	    # Try to remove file
	    cmd rm -f "${_dst}"
	    if test $? -ne 0 ; then
		err "can't delete file '${_dst}'"
	    fi
	fi
    done
}

# Main subroutine
main ()
{
    startup || return 1
    copy_files
    link_files
    remove_files
}

# Call main subroutine
main "$@"
